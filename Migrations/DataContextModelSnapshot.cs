// <auto-generated />
using System;
using Delmar1Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DelmarApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("Delmar1Api.Models.BuildingClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(24);

                    b.HasKey("Id");

                    b.ToTable("BuildingClasses");
                });

            modelBuilder.Entity("Delmar1Api.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApnParcelId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AvailForLease")
                        .HasColumnType("TEXT");

                    b.Property<string>("BrochureFileName")
                        .HasColumnType("TEXT");

                    b.Property<int>("BuildingSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DockHighDoors")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Floors")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ForLease")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ForSale")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ForSaleSince")
                        .HasColumnType("TEXT");

                    b.Property<int>("GroundLevelDoors")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaseAreaSize")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LeaseEnd")
                        .HasColumnType("TEXT");

                    b.Property<int>("LeaseFloor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LeaseUnitNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LotSize")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxUnits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinUnits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OfficeSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParkingSpaces")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertySubTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("TEXT");

                    b.Property<int>("SaleTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearBuilt")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PropertySubTypeId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("SaleTypeId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Delmar1Api.Models.PropertyAndUserLink", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PropertyId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PropertyAndUserLinks");
                });

            modelBuilder.Entity("Delmar1Api.Models.PropertyPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyPictures");
                });

            modelBuilder.Entity("Delmar1Api.Models.PropertySubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("PropertySubTypes");
                });

            modelBuilder.Entity("Delmar1Api.Models.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("Delmar1Api.Models.SaleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SaleTypes");
                });

            modelBuilder.Entity("Delmar1Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT");

                    b.Property<string>("FaxPhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficePhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherPhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherPhoneType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Delmar1Api.Models.Property", b =>
                {
                    b.HasOne("Delmar1Api.Models.PropertySubType", "PropertySubType")
                        .WithMany()
                        .HasForeignKey("PropertySubTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Delmar1Api.Models.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Delmar1Api.Models.SaleType", "SaleType")
                        .WithMany()
                        .HasForeignKey("SaleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Delmar1Api.Models.PropertyAndUserLink", b =>
                {
                    b.HasOne("Delmar1Api.Models.Property", "Property")
                        .WithMany("UserLinks")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delmar1Api.Models.User", "User")
                        .WithMany("PropertyLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Delmar1Api.Models.PropertyPicture", b =>
                {
                    b.HasOne("Delmar1Api.Models.Property", "Property")
                        .WithMany("PropertyPictures")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Delmar1Api.Models.PropertySubType", b =>
                {
                    b.HasOne("Delmar1Api.Models.PropertyType", "PropertyType")
                        .WithMany("PropertySubTypes")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
